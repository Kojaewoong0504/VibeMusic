/**
 * T004: ÌÉÄÏù¥Ìïë Ïù¥Î≤§Ìä∏ Ï∫°Ï≤ò ÏãúÏä§ÌÖú Íµ¨ÌòÑ
 * Enhanced typing capture system with real-time pattern analysis
 */
import { useState, useEffect, useCallback, useRef } from 'react';
import { TypingEvent, TypingPattern } from './types';

interface UseEnhancedTypingCaptureOptions {
  enabled?: boolean;
  bufferSize?: number; // Î≤ÑÌçºÏóê Ï†ÄÏû•Ìï† ÏµúÎåÄ Ïù¥Î≤§Ìä∏ Ïàò
  analysisWindowMs?: number; // Ìå®ÌÑ¥ Î∂ÑÏÑù ÏúàÎèÑÏö∞ ÏãúÍ∞Ñ (ms)
  performanceMode?: boolean; // ÏÑ±Îä• ÏµúÏ†ÅÌôî Î™®Îìú
}

interface UseEnhancedTypingCaptureReturn {
  events: TypingEvent[];
  pattern: TypingPattern | null;
  isCapturing: boolean;
  startCapture: () => void;
  stopCapture: () => void;
  clearBuffer: () => void;
  performanceMetrics: {
    processingTime: number;
    eventCount: number;
    averageProcessingTime: number;
  };
}

export function useEnhancedTypingCapture(
  options: UseEnhancedTypingCaptureOptions = {}
): UseEnhancedTypingCaptureReturn {
  const {
    enabled = false,
    bufferSize = 1000,
    analysisWindowMs = 5000,
    performanceMode = true
  } = options;

  const [events, setEvents] = useState<TypingEvent[]>([]);
  const [pattern, setPattern] = useState<TypingPattern | null>(null);
  const [isCapturing, setIsCapturing] = useState(false);

  // ÏÑ±Îä• Î©îÌä∏Î¶≠Ïä§
  const [performanceMetrics, setPerformanceMetrics] = useState({
    processingTime: 0,
    eventCount: 0,
    averageProcessingTime: 0
  });

  // ÎÇ¥Î∂Ä ÏÉÅÌÉú Í¥ÄÎ¶¨
  const bufferRef = useRef<TypingEvent[]>([]);
  const lastAnalysisRef = useRef<number>(0);
  const keyDownTimeRef = useRef<Map<string, number>>(new Map());
  const lastEventTimeRef = useRef<number>(0);
  const processingTimesRef = useRef<number[]>([]);

  // ÌÉÄÏù¥Ìïë Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± (T004 ÏöîÍµ¨ÏÇ¨Ìï≠Ïóê ÎßûÍ≤å Í∞úÏÑ†)
  const createTypingEvent = useCallback((
    event: KeyboardEvent,
    isKeyDown: boolean,
    startTime: number
  ): TypingEvent => {
    const timestamp = Date.now();
    const key = event.key;

    // duration Í≥ÑÏÇ∞ (ÌÇ§ ÎàÑÎ¶Ñ ÏãúÍ∞Ñ)
    let duration = 0;
    if (isKeyDown) {
      // ÌÇ§ Îã§Ïö¥ Ïãú ÏãúÏûë ÏãúÍ∞Ñ Í∏∞Î°ù
      keyDownTimeRef.current.set(key, timestamp);
    } else {
      // ÌÇ§ ÏóÖ Ïãú duration Í≥ÑÏÇ∞
      const keyDownTime = keyDownTimeRef.current.get(key);
      if (keyDownTime) {
        duration = timestamp - keyDownTime;
        keyDownTimeRef.current.delete(key);
      }
    }

    // interval Í≥ÑÏÇ∞ (Ïù¥Ï†Ñ ÌÇ§ÏôÄÏùò Í∞ÑÍ≤©)
    const interval = lastEventTimeRef.current > 0 ? timestamp - lastEventTimeRef.current : 0;
    lastEventTimeRef.current = timestamp;

    // isBackspace Í≤ÄÏÇ¨
    const isBackspace = key === 'Backspace' || key === 'Delete';

    return {
      key,
      timestamp,
      duration,
      interval,
      isBackspace,
      // ÌïòÏúÑ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Í∏∞Ï°¥ ÌïÑÎìú
      keyCode: event.keyCode || event.which,
      isKeyDown
    };
  }, []);

  // ÌÉÄÏù¥Ìïë Ìå®ÌÑ¥ Î∂ÑÏÑù (T004 ÏöîÍµ¨ÏÇ¨Ìï≠Ïóê ÎßûÍ≤å Í∞úÏÑ†)
  const analyzePattern = useCallback((eventWindow: TypingEvent[]): TypingPattern => {
    const startTime = performance.now();

    if (eventWindow.length < 2) {
      return {
        events: eventWindow,
        averageSpeed: 0,
        rhythmVariation: 0,
        pausePattern: [],
        // ÌïòÏúÑ Ìò∏ÌôòÏÑ±
        speed: 0,
        rhythm: 0,
        pauses: [],
        consistency: 0,
        pressure: 0
      };
    }

    // ÌÇ§ Îã§Ïö¥ Ïù¥Î≤§Ìä∏Îßå ÌïÑÌÑ∞ÎßÅ (Ïã§Ï†ú ÌÉÄÏù¥Ìïë)
    const typingEvents = eventWindow.filter(e => e.isKeyDown && !e.isBackspace);

    if (typingEvents.length < 2) {
      return {
        events: eventWindow,
        averageSpeed: 0,
        rhythmVariation: 0,
        pausePattern: [],
        speed: 0,
        rhythm: 0,
        pauses: [],
        consistency: 0,
        pressure: 0
      };
    }

    // averageSpeed Í≥ÑÏÇ∞ (WPM)
    const timeSpanMs = typingEvents[typingEvents.length - 1].timestamp - typingEvents[0].timestamp;
    const timeSpanMin = timeSpanMs / 60000;
    const averageSpeed = timeSpanMin > 0 ? (typingEvents.length / 5) / timeSpanMin : 0;

    // rhythmVariation Í≥ÑÏÇ∞ (Î¶¨Îì¨ Î≥ÄÌôîÎèÑ)
    const intervals = typingEvents.slice(1).map((event, index) =>
      event.timestamp - typingEvents[index].timestamp
    );

    const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;
    const variance = intervals.reduce((sum, interval) =>
      sum + Math.pow(interval - avgInterval, 2), 0
    ) / intervals.length;
    const standardDeviation = Math.sqrt(variance);
    const rhythmVariation = avgInterval > 0 ? standardDeviation / avgInterval : 0;

    // pausePattern Í≥ÑÏÇ∞ (ÏùºÏãúÏ†ïÏßÄ Ìå®ÌÑ¥)
    const pausePattern = intervals.filter(interval => interval > 500); // 500ms Ïù¥ÏÉÅÏùÑ ÏùºÏãúÏ†ïÏßÄÎ°ú Í∞ÑÏ£º

    // ÏÑ±Îä• Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏
    const processingTime = performance.now() - startTime;
    processingTimesRef.current.push(processingTime);
    if (processingTimesRef.current.length > 100) {
      processingTimesRef.current = processingTimesRef.current.slice(-50);
    }

    const averageProcessingTime = processingTimesRef.current.reduce((sum, time) => sum + time, 0) /
      processingTimesRef.current.length;

    setPerformanceMetrics({
      processingTime,
      eventCount: eventWindow.length,
      averageProcessingTime
    });

    return {
      events: eventWindow,
      averageSpeed: Math.round(averageSpeed * 100) / 100,
      rhythmVariation: Math.round(rhythmVariation * 100) / 100,
      pausePattern,
      // ÌïòÏúÑ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Í∏∞Ï°¥ ÌïÑÎìú
      speed: Math.round(averageSpeed),
      rhythm: Math.max(0, 1 - rhythmVariation),
      pauses: pausePattern,
      consistency: Math.max(0, 1 - rhythmVariation),
      pressure: Math.min(1, typingEvents.length / 100)
    };
  }, []);

  // ÌÇ§ Îã§Ïö¥ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if (!isCapturing) return;

    const startTime = performance.now();
    const typingEvent = createTypingEvent(event, true, startTime);

    // Î≤ÑÌçº ÏóÖÎç∞Ïù¥Ìä∏
    bufferRef.current = [...bufferRef.current, typingEvent].slice(-bufferSize);
    setEvents(prev => [...prev, typingEvent].slice(-bufferSize));

    // ÏÑ±Îä• Î™®ÎìúÏóê Îî∞Î•∏ Î∂ÑÏÑù Ï£ºÍ∏∞ Ï°∞Ï†ï
    const analysisInterval = performanceMode ? 1000 : 500; // ÏÑ±Îä• Î™®ÎìúÏóêÏÑúÎäî 1Ï¥à, ÏùºÎ∞ò Î™®ÎìúÏóêÏÑúÎäî 0.5Ï¥à

    const now = Date.now();
    if (now - lastAnalysisRef.current > analysisInterval) {
      const windowStart = now - analysisWindowMs;
      const eventWindow = bufferRef.current.filter(e => e.timestamp >= windowStart);

      if (eventWindow.length > 1) {
        const newPattern = analyzePattern(eventWindow);
        setPattern(newPattern);
        lastAnalysisRef.current = now;
      }
    }
  }, [isCapturing, createTypingEvent, bufferSize, analysisWindowMs, analyzePattern, performanceMode]);

  // ÌÇ§ ÏóÖ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleKeyUp = useCallback((event: KeyboardEvent) => {
    if (!isCapturing) return;

    const startTime = performance.now();
    const typingEvent = createTypingEvent(event, false, startTime);

    // ÌÇ§ ÏóÖ Ïù¥Î≤§Ìä∏ÎèÑ Í∏∞Î°ù (duration Í≥ÑÏÇ∞ÏùÑ ÏúÑÌï¥ ÌïÑÏöî)
    bufferRef.current = [...bufferRef.current, typingEvent].slice(-bufferSize);
    setEvents(prev => [...prev, typingEvent].slice(-bufferSize));
  }, [isCapturing, createTypingEvent, bufferSize]);

  // Ï∫°Ï≤ò ÏãúÏûë
  const startCapture = useCallback(() => {
    setIsCapturing(true);
    lastEventTimeRef.current = 0;
    keyDownTimeRef.current.clear();
    console.log('üéØ ÌÉÄÏù¥Ìïë Ï∫°Ï≤ò ÏãúÏûëÎê®');
  }, []);

  // Ï∫°Ï≤ò Ï§ëÏßÄ
  const stopCapture = useCallback(() => {
    setIsCapturing(false);
    console.log('‚èπÔ∏è ÌÉÄÏù¥Ìïë Ï∫°Ï≤ò Ï§ëÏßÄÎê®');
  }, []);

  // Î≤ÑÌçº ÌÅ¥Î¶¨Ïñ¥
  const clearBuffer = useCallback(() => {
    setEvents([]);
    setPattern(null);
    bufferRef.current = [];
    lastAnalysisRef.current = 0;
    lastEventTimeRef.current = 0;
    keyDownTimeRef.current.clear();
    processingTimesRef.current = [];
    setPerformanceMetrics({
      processingTime: 0,
      eventCount: 0,
      averageProcessingTime: 0
    });
    console.log('üßπ ÌÉÄÏù¥Ìïë Î≤ÑÌçº ÌÅ¥Î¶¨Ïñ¥Îê®');
  }, []);

  // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù/Ìï¥Ï†ú
  useEffect(() => {
    if (isCapturing) {
      // Î∏åÎùºÏö∞Ï†Ä Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Ïù¥Î≤§Ìä∏ ÏòµÏÖò
      const options = { passive: true };
      document.addEventListener('keydown', handleKeyDown, options);
      document.addEventListener('keyup', handleKeyUp, options);
    }

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    };
  }, [isCapturing, handleKeyDown, handleKeyUp]);

  // enabled ÏòµÏÖòÏóê Îî∞Î•∏ ÏûêÎèô ÏãúÏûë/Ï§ëÏßÄ
  useEffect(() => {
    if (enabled) {
      startCapture();
    } else {
      stopCapture();
    }
  }, [enabled, startCapture, stopCapture]);

  return {
    events,
    pattern,
    isCapturing,
    startCapture,
    stopCapture,
    clearBuffer,
    performanceMetrics
  };
}

export default useEnhancedTypingCapture;