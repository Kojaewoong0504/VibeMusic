asyncapi: 3.0.0
info:
  title: VibeMusic WebSocket API
  version: 1.0.0
  description: 실시간 타이핑 패턴 캡처를 위한 WebSocket API 명세

servers:
  production:
    host: wss://api.vibemusic.app
    protocol: wss
    description: Production WebSocket server
  development:
    host: ws://localhost:8000
    protocol: ws
    description: Development WebSocket server

channels:
  /ws/typing/{session_id}:
    parameters:
      session_id:
        description: 사용자 세션 ID
        schema:
          type: string
          format: uuid
    messages:
      typingPattern:
        $ref: '#/components/messages/TypingPattern'
      patternAck:
        $ref: '#/components/messages/PatternAck'
      error:
        $ref: '#/components/messages/Error'
      connect:
        $ref: '#/components/messages/Connect'
      disconnect:
        $ref: '#/components/messages/Disconnect'

operations:
  sendTypingPattern:
    action: send
    channel:
      $ref: '#/channels/~1ws~1typing~1{session_id}'
    summary: 타이핑 패턴 데이터 전송
    description: 클라이언트가 실시간으로 키보드 입력 패턴을 서버에 전송
    messages:
      - $ref: '#/channels/~1ws~1typing~1{session_id}/messages/typingPattern'

  receivePatternAck:
    action: receive
    channel:
      $ref: '#/channels/~1ws~1typing~1{session_id}'
    summary: 패턴 수신 확인
    description: 서버가 타이핑 패턴 수신을 확인
    messages:
      - $ref: '#/channels/~1ws~1typing~1{session_id}/messages/patternAck'

  receiveError:
    action: receive
    channel:
      $ref: '#/channels/~1ws~1typing~1{session_id}'
    summary: 오류 메시지 수신
    description: 연결 또는 데이터 처리 오류 발생 시 메시지
    messages:
      - $ref: '#/channels/~1ws~1typing~1{session_id}/messages/error'

components:
  messages:
    Connect:
      name: connect
      title: 연결 초기화
      summary: WebSocket 연결 시 인증 및 초기화
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ConnectPayload'

    TypingPattern:
      name: typing_pattern
      title: 타이핑 패턴 데이터
      summary: 실시간 키보드 입력 패턴 전송
      contentType: application/json
      payload:
        $ref: '#/components/schemas/TypingPatternPayload'

    PatternAck:
      name: pattern_ack
      title: 패턴 수신 확인
      summary: 서버의 패턴 데이터 수신 확인
      contentType: application/json
      payload:
        $ref: '#/components/schemas/PatternAckPayload'

    Error:
      name: error
      title: 오류 메시지
      summary: WebSocket 연결 또는 데이터 처리 오류
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ErrorPayload'

    Disconnect:
      name: disconnect
      title: 연결 종료
      summary: 클라이언트 연결 종료 알림
      contentType: application/json
      payload:
        $ref: '#/components/schemas/DisconnectPayload'

  schemas:
    ConnectPayload:
      type: object
      properties:
        type:
          type: string
          const: connect
        session_token:
          type: string
          description: 세션 인증 토큰
        client_info:
          type: object
          properties:
            user_agent:
              type: string
            timezone:
              type: string
            screen_resolution:
              type: string
      required:
        - type
        - session_token

    TypingPatternPayload:
      type: object
      properties:
        type:
          type: string
          const: typing_pattern
        sequence_id:
          type: integer
          description: 순차 ID (패킷 순서 보장용)
        timestamp:
          type: number
          format: double
          description: 클라이언트 타임스탬프
        keystrokes:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                description: 입력된 키
              timestamp:
                type: number
                format: double
                description: 키 입력 시점
              duration:
                type: number
                format: double
                description: 키를 누른 지속 시간
              event_type:
                type: string
                enum: [keydown, keyup]
              modifiers:
                type: array
                items:
                  type: string
                  enum: [ctrl, alt, shift, meta]
            required:
              - key
              - timestamp
              - event_type
          minItems: 1
          maxItems: 100
        text_buffer:
          type: string
          description: 현재 타이핑된 텍스트 (최대 100자)
          maxLength: 100
      required:
        - type
        - sequence_id
        - timestamp
        - keystrokes

    PatternAckPayload:
      type: object
      properties:
        type:
          type: string
          const: pattern_ack
        sequence_id:
          type: integer
          description: 확인하는 패킷의 sequence_id
        server_timestamp:
          type: number
          format: double
          description: 서버 수신 시각
        latency_ms:
          type: number
          format: double
          description: 네트워크 레이턴시 (밀리초)
        status:
          type: string
          enum: [received, processed, buffered]
      required:
        - type
        - sequence_id
        - server_timestamp
        - status

    ErrorPayload:
      type: object
      properties:
        type:
          type: string
          const: error
        error_code:
          type: string
          enum:
            - INVALID_TOKEN
            - SESSION_EXPIRED
            - RATE_LIMIT_EXCEEDED
            - INVALID_DATA_FORMAT
            - SERVER_ERROR
        message:
          type: string
          description: 사용자용 오류 메시지
        details:
          type: object
          description: 개발자용 상세 정보
        retry_after:
          type: integer
          description: 재시도 가능 시간 (초)
      required:
        - type
        - error_code
        - message

    DisconnectPayload:
      type: object
      properties:
        type:
          type: string
          const: disconnect
        reason:
          type: string
          enum:
            - CLIENT_REQUEST
            - SESSION_TIMEOUT
            - SERVER_SHUTDOWN
            - ERROR
        message:
          type: string
          description: 종료 사유 설명
      required:
        - type
        - reason

  securitySchemes:
    sessionToken:
      type: httpApiKey
      name: session_token
      in: query
      description: 세션 생성 시 발급받은 인증 토큰

# Connection Flow Documentation
x-connection-flow:
  description: |
    WebSocket 연결 및 데이터 흐름 설명
    
    1. 연결 초기화:
       - 클라이언트: /ws/typing/{session_id}?session_token={token}으로 연결
       - 서버: 토큰 검증 후 연결 승인
       - 클라이언트: connect 메시지로 클라이언트 정보 전송
    
    2. 타이핑 패턴 전송:
       - 클라이언트: 100ms마다 타이핑 데이터 배치 전송
       - 서버: 각 배치에 대해 pattern_ack 응답
       - 연결 품질 모니터링 (레이턴시, 패킷 손실)
    
    3. 오류 처리:
       - 토큰 만료: INVALID_TOKEN 오류 후 재연결 필요
       - 과도한 트래픽: RATE_LIMIT_EXCEEDED 오류 후 잠시 대기
       - 데이터 형식 오류: INVALID_DATA_FORMAT 오류, 데이터 재전송
    
    4. 연결 종료:
       - 클라이언트: disconnect 메시지 전송 후 연결 종료
       - 서버: 세션 데이터 저장 및 정리

x-performance-requirements:
  max_concurrent_connections: 1000
  message_throughput: "100 msg/sec per connection"
  max_message_size: "4KB"
  connection_timeout: "30 seconds"
  keepalive_interval: "30 seconds"
  max_buffer_size: "1MB per connection"